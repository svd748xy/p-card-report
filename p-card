<!DOCTYPE html>
<html>

<head>
    <title>PE情绪卡牌简易使用报告</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
    <style>
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
        }

        .data-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ddd;
        }

        .charts {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
        }

        canvas {
            max-width: 600px;
            margin: 10px auto;
        }

        button {
            padding: 10px 20px;
            margin: 10px;
            background: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }

        .input-group {
            margin: 10px 0;
            padding: 5px;
            border: 1px solid #eee;
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .card-type {
            color: #fff;
            padding: 2px 5px;
            border-radius: 3px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        
        #consultation-event {
            width: 50%;
            margin-top: 10px;
            padding: 8px;
        }
        
        .delete-btn {
            background: #ff4444;
            padding: 5px 10px;
            margin: 0;
            cursor: pointer;
        }

        /* 词汇和分值选择下拉框样式统一 */
        .word-select, .score-select {
            padding: 5px;
            width: 200px;
        }
        
        .score-select {
            width: 80px;
        }
        
        .blank-card-btn {
            background: #2196F3;
        }
        
        .type-select {
            width: 120px;
            padding: 5px;
        }

        /* 卡牌统计表格样式 */
        .stats-table-container {
            margin-top: 30px;
        }
        
        .stats-table th, .stats-table td {
            text-align: center;
        }
        
        .stats-table th:first-child {
            text-align: left;
        }
        
        .color-indicator {
            width: 15px;
            height: 15px;
            display: inline-block;
            border-radius: 3px;
            margin-right: 5px;
        }
        
        /* 内容概述相关样式 */
        .overview-btn {
            background: #9C27B0;
            margin-left: 10px;
        }
        
        .overview-input-container {
            margin: 10px 0 20px 0;
            display: none;
        }
        
        .overview-input {
            width: 100%;
            padding: 8px;
            min-height: 80px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        
        /* 基本信息表格样式优化 */
        #basic-info-table th {
            background-color: #f5f5f5;
        }
        
        .overview-row td:first-child {
            font-weight: bold;
            width: 120px;
        }
    </style>
</head>

<body>
    <div class="container">
        <!-- 数据输入部分 -->
        <div class="data-section">
            <h2>基本信息</h2>
            <div>
                <input type="text" id="name" placeholder="姓名" oninput="updateCharts()">
                <select id="gender" onchange="updateCharts()">
                    <option value="">请选择性别</option>
                    <option value="男">男</option>
                    <option value="女">女</option>
                </select>
                <input type="number" id="age" placeholder="年龄" oninput="updateCharts()">
                <input type="date" id="date" oninput="updateCharts()">
            </div>
            
            <div style="margin-top: 15px;">
                <h3>咨询事件</h3>
                <input type="text" id="consultation-event" placeholder="请输入咨询事件内容" oninput="updateCharts()">
            </div>

            <h3>首选情绪卡牌
                <button type="button" class="overview-btn" onclick="toggleOverview('emotion1-overview')">内容概述</button>
            </h3>
            <div id="emotion1-overview" class="overview-input-container">
                <textarea class="overview-input" placeholder="请输入首选情绪卡牌的内容概述..." oninput="updateCharts()"></textarea>
            </div>
            <div id="emotion1-inputs">
                <button type="button" onclick="addEmotionInput('emotion1', false)">+ 添加情绪卡牌</button>
                <button type="button" class="blank-card-btn" onclick="addEmotionInput('emotion1', true)">空白卡补充</button>
            </div>

            <h3>中期行动卡牌
                <button type="button" class="overview-btn" onclick="toggleOverview('action-overview')">内容概述</button>
            </h3>
            <div id="action-overview" class="overview-input-container">
                <textarea class="overview-input" placeholder="请输入中期行动卡牌的内容概述..." oninput="updateCharts()"></textarea>
            </div>
            <div id="action-inputs">
                <button type="button" onclick="addActionInput(false)">+ 添加行动卡牌</button>
                <button type="button" class="blank-card-btn" onclick="addActionInput(true)">空白卡补充</button>
            </div>

            <h3>再选情绪卡牌
                <button type="button" class="overview-btn" onclick="toggleOverview('emotion2-overview')">内容概述</button>
            </h3>
            <div id="emotion2-overview" class="overview-input-container">
                <textarea class="overview-input" placeholder="请输入再选情绪卡牌的内容概述..." oninput="updateCharts()"></textarea>
            </div>
            <div id="emotion2-inputs">
                <button type="button" onclick="addEmotionInput('emotion2', false)">+ 添加情绪卡牌</button>
                <button type="button" class="blank-card-btn" onclick="addEmotionInput('emotion2', true)">空白卡补充</button>
            </div>

            <button onclick="saveAsImage()">💾 保存为图片</button>
        </div>

        <!-- 图表展示部分 -->
        <div class="charts">
            <div><canvas id="emotion1Chart"></canvas></div>
            <div><canvas id="emotion2Chart"></canvas></div>
            <div><canvas id="actionTypeChart"></canvas></div>
            <div><canvas id="comparisonChart"></canvas></div>
            <div><canvas id="actionScoreChart"></canvas></div>
        </div>

        <!-- 卡牌统计表格 -->
        <div class="stats-table-container">
            <h2>卡牌类型数量统计</h2>
            <table class="stats-table" id="card-stats-table">
                <thead>
                    <tr>
                        <th>卡牌类型</th>
                        <th>首选情绪卡牌</th>
                        <th>中期行动卡牌</th>
                        <th>再选情绪卡牌</th>
                        <th>总计</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- 由JavaScript动态生成 -->
                </tbody>
            </table>
        </div>

        <!-- 基本信息和概述呈现表格 -->
        <table id="basic-info-table">
            <thead>
                <tr>
                    <th>姓名</th>
                    <th>性别</th>
                    <th>年龄</th>
                    <th>日期</th>
                    <th>咨询事件</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td id="name-display"></td>
                    <td id="gender-display"></td>
                    <td id="age-display"></td>
                    <td id="date-display"></td>
                    <td id="consultation-event-display"></td>
                </tr>
                <tr class="overview-row">
                    <td>首选情绪概述</td>
                    <td colspan="4" id="emotion1-overview-display"></td>
                </tr>
                <tr class="overview-row">
                    <td>中期行动概述</td>
                    <td colspan="4" id="action-overview-display"></td>
                </tr>
                <tr class="overview-row">
                    <td>再选情绪概述</td>
                    <td colspan="4" id="emotion2-overview-display"></td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>document.addEventListener('change', function(e) {
  if (e.target.matches('.score-select, .type-select, .word-select, #gender, #date')) {
    updateCharts();
  }
});

document.addEventListener('input', function(e) {
  if (e.target.matches('#name, #age, #consultation-event, .overview-input, .word-select[type="text"]')) {
    updateCharts();
  }
});

        // 情感牌堆和行动牌堆词汇库
        const wordBank = {
            emotion: {
                '正向情绪': ['幸福', '思念', '向往', '感动', '勇气', '坦然', '满足', '庆幸', '轻松', '心平气和', '自豪', '兴奋', '爱'],
                '负向情绪': ['愤怒', '迷茫', '失落', '自卑', '羞耻', '愧疚', '妒忌', '烦躁', '焦虑', '绝望', '悲伤', '憎恨', '恐惧'],
                '内在需求': ['安全感', '平衡', '尽善尽美', '自我接纳', '自主权', '信心', '自我成长', '理解', '尊重', '责任感', '意义感', '归属感', '成就感'],
                '外在需求': ['被看见', '付出', '公平', '期待', '和谐', '边界感', '真诚', '包容', '陪伴', '被信任', '被支持', '被需要', '被认可']
            },
            action: {
                '生活乐趣': ['倾诉', '喝酒', '梳妆打扮', '做清洁', '养宠物', '养花草', '玩游戏', '追剧', '阅读', '购物', '旅游', '听音乐', '睡觉'],
                '技能培养': ['写作', '跳街舞', '摄影', '烘焙', '烹饪', '茶艺', '插花', '涂鸦', '做手工', '绘画', '演奏乐器', '唱歌', '演讲'],
                '运动锻炼': ['散步', '打太极', '拳击', '棋类运动', '爬山', '跳绳', '跳舞', '游泳', '挥拍运动', '三大球运动', '健身', '骑车', '跑步'],
                '自我提升': ['总结反思', '心理咨询', '调侃', '做善事', '独处', '感悟', '学会拒绝', '主动社交', '主动求助', '投入学习', '投入工作', '自我鼓励', '自我觉察']
            }
        };

        const cardConfig = {
            emotionTypes: {
                '正向情绪': { color: '#FF6384' },
                '负向情绪': { color: '#36A2EB' },
                '内在需求': { color: '#FFCE56' },
                '外在需求': { color: '#4BC0C0' }
            },
            actionTypes: {
                '生活乐趣': { color: '#FF6384' },
                '技能培养': { color: '#36A2EB' },
                '运动锻炼': { color: '#4BC0C0' },
                '自我提升': { color: '#FFCE56' }
            }
        };

        let chartInstances = {
            emotion1: null,
            emotion2: null,
            actionType: null,
            comparison: null,
            actionScore: null
        };

        // 数据存储
        let data = {
            emotions1: [],
            actions: [],
            emotions2: [],
            overviews: {
                emotion1: '',
                action: '',
                emotion2: ''
            },
            getEmotionStats: (section) => {
                const stats = { counts: {}, scores: {} };
                data[section].forEach(item => {
                    stats.counts[item.type] = (stats.counts[item.type] || 0) + 1;
                    stats.scores[item.type] = (stats.scores[item.type] || 0) + (item.score || 0);
                });
                return stats;
            },
            getActionStats: () => {
                const stats = { counts: {}, scores: {}, details: {} };
                data.actions.forEach(item => {
                    stats.counts[item.type] = (stats.counts[item.type] || 0) + 1;
                    stats.scores[item.type] = (stats.scores[item.type] || 0) + (item.score || 0);
                    if (!stats.details[item.type]) stats.details[item.type] = [];
                    stats.details[item.type].push(`${item.name} (${item.score})`);
                });
                return stats;
            },
            getAllCardStats: () => {
                // 初始化统计对象
                const stats = {};
                
                // 初始化所有情绪类型
                Object.keys(cardConfig.emotionTypes).forEach(type => {
                    stats[type] = {
                        emotion1: 0,
                        action: 0,
                        emotion2: 0,
                        total: 0,
                        color: cardConfig.emotionTypes[type].color
                    };
                });
                
                // 初始化所有行动类型
                Object.keys(cardConfig.actionTypes).forEach(type => {
                    stats[type] = {
                        emotion1: 0,
                        action: 0,
                        emotion2: 0,
                        total: 0,
                        color: cardConfig.actionTypes[type].color
                    };
                });
                
                // 统计首选情绪卡牌
                data.emotions1.forEach(item => {
                    if (stats[item.type]) {
                        stats[item.type].emotion1++;
                    }
                });
                
                // 统计中期行动卡牌
                data.actions.forEach(item => {
                    if (stats[item.type]) {
                        stats[item.type].action++;
                    }
                });
                
                // 统计再选情绪卡牌
                data.emotions2.forEach(item => {
                    if (stats[item.type]) {
                        stats[item.type].emotion2++;
                    }
                });
                
                // 计算总计
                Object.values(stats).forEach(typeStats => {
                    typeStats.total = typeStats.emotion1 + typeStats.action + typeStats.emotion2;
                });
                
                return stats;
            }
        };

        // 切换内容概述输入框的显示/隐藏
        function toggleOverview(id) {
            const container = document.getElementById(id);
            container.style.display = container.style.display === 'block' ? 'none' : 'block';
        }

        // 创建分值选择下拉框
        function createScoreSelect() {
            const select = document.createElement('select');
            select.className = 'score-select';
            select.onchange = updateCharts;
            
            // 添加空选项作为默认
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = '选择分值';
            select.appendChild(defaultOption);
            
            // 添加1-7分选项
            for (let i = 1; i <= 7; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = i;
                select.appendChild(option);
            }
            
            return select;
        }

        // 创建词汇选择下拉框
        function createWordSelect(type, isEmotion, isBlank) {
            const select = document.createElement('select');
            select.className = 'word-select';
            select.onchange = updateCharts;
            
            // 如果是空白卡，使用输入框
            if (isBlank) {
                const input = document.createElement('input');
                input.type = 'text';
                input.className = 'word-select';
                input.placeholder = '手动输入词汇';
                input.oninput = updateCharts;
                return input;
            }
            
            // 非空白卡，使用下拉框并填充词汇
            updateWordOptions(select, type, isEmotion);
            return select;
        }

        // 更新词汇下拉框选项
        function updateWordOptions(select, type, isEmotion) {
            // 保存当前选中值
            const currentValue = select.value;
            
            // 清空现有选项
            select.innerHTML = '';
            
            // 添加默认选项
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = '选择词汇';
            select.appendChild(defaultOption);
            
            // 获取对应类型的词汇
            const bank = isEmotion ? wordBank.emotion : wordBank.action;
            const words = bank[type] || [];
            
            // 添加词汇选项
            words.forEach(word => {
                const option = document.createElement('option');
                option.value = word;
                option.textContent = word;
                select.appendChild(option);
            });
            
            // 尝试恢复之前的选中值
            if (currentValue && words.includes(currentValue)) {
                select.value = currentValue;
            }
        }

        // 动态添加输入项
        function createInputGroup(typeOptions, isEmotion, isBlank) {
            const group = document.createElement('div');
            group.className = 'input-group';
            
            // 创建类型选择下拉框
            const typeSelect = document.createElement('select');
            typeSelect.className = 'type-select';
            
            // 填充类型选项
            const typeEntries = Object.entries(typeOptions);
            typeEntries.forEach(([typeName]) => {
                const option = document.createElement('option');
                option.value = typeName;
                option.textContent = typeName;
                typeSelect.appendChild(option);
            });
            
            // 获取默认类型
            const defaultType = typeEntries[0][0];
            
            // 创建词汇选择组件
            const wordSelect = createWordSelect(defaultType, isEmotion, isBlank);
            
            // 创建分值选择下拉框
            const scoreSelect = createScoreSelect();
            
            // 创建类型标签
            const typeLabel = document.createElement('span');
            typeLabel.className = 'card-type';
            typeLabel.style.background = typeOptions[defaultType].color;
            typeLabel.textContent = defaultType;
            
            // 创建删除按钮
            const deleteBtn = document.createElement('button');
            deleteBtn.type = 'button';
            deleteBtn.className = 'delete-btn';
            deleteBtn.textContent = '- 删除';
            deleteBtn.onclick = function() { deleteInputGroup(this); };
            
            // 类型变化时更新相关组件
            typeSelect.addEventListener('change', function() {
                const selectedType = this.value;
                // 更新标签样式和文本
                typeLabel.style.background = typeOptions[selectedType].color;
                typeLabel.textContent = selectedType;
                
                // 如果不是空白卡，更新词汇选项
                if (!isBlank && wordSelect.tagName === 'SELECT') {
                    updateWordOptions(wordSelect, selectedType, isEmotion);
                }
                
                // 更新图表
                updateCharts();
            });
            
            // 添加所有组件到输入组
            group.appendChild(typeSelect);
            group.appendChild(wordSelect);
            group.appendChild(scoreSelect);
            group.appendChild(typeLabel);
            group.appendChild(deleteBtn);
            
            return group;
        }

        // 删除输入项
        function deleteInputGroup(button) {
            const inputGroup = button.closest('.input-group');
            if (inputGroup) {
                inputGroup.remove();
                updateCharts();
            }
        }

        function addEmotionInput(section, isBlank) {
            const container = document.getElementById(`${section}-inputs`);
            container.appendChild(createInputGroup(cardConfig.emotionTypes, true, isBlank));
            updateCharts();
        }

        function addActionInput(isBlank) {
            const container = document.getElementById('action-inputs');
            container.appendChild(createInputGroup(cardConfig.actionTypes, false, isBlank));
            updateCharts();
        }

        // 数据收集
        function collectData() {
            const getData = (containerId) =>
                Array.from(document.querySelectorAll(`#${containerId} .input-group`)).map(div => {
                    const wordElement = div.querySelector('.word-select');
                    return {
                        type: div.querySelector('.type-select').value,
                        name: wordElement.tagName === 'INPUT' ? wordElement.value : wordElement.value,
                        score: parseInt(div.querySelector('.score-select').value) || 0
                    };
                });

            data.emotions1 = getData('emotion1-inputs');
            data.actions = getData('action-inputs');
            data.emotions2 = getData('emotion2-inputs');
            
            // 收集概述内容
            data.overviews.emotion1 = document.querySelector('#emotion1-overview textarea').value;
            data.overviews.action = document.querySelector('#action-overview textarea').value;
            data.overviews.emotion2 = document.querySelector('#emotion2-overview textarea').value;
        }

        // 图表更新
        function updateCharts() {
            collectData();
            destroyCharts();
            renderEmotionChart('emotion1', '首选情绪分布');
            renderEmotionChart('emotion2', '再选情绪分布');
            renderActionTypeChart();
            renderComparisonChart();
            renderActionScoreChart();
            updateBasicInfoTable();
            updateCardStatsTable();
        }

        function renderEmotionChart(section, title) {
            const stats = data.getEmotionStats(`emotions${section.slice(-1)}`);
            const ctx = document.getElementById(`${section}Chart`).getContext('2d');
            chartInstances[section] = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: Object.keys(stats.counts),
                    datasets: [{
                        data: Object.values(stats.counts),
                        backgroundColor: Object.keys(stats.counts).map(k => cardConfig.emotionTypes[k].color)
                    }]
                },
                options: { title: { display: true, text: title } }
            });
        }

        function renderActionTypeChart() {
            const stats = data.getActionStats();
            const ctx = document.getElementById('actionTypeChart').getContext('2d');
            chartInstances.actionType = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: Object.keys(stats.counts),
                    datasets: [{
                        data: Object.values(stats.counts),
                        backgroundColor: Object.keys(stats.counts).map(k => cardConfig.actionTypes[k].color)
                    }]
                },
                options: { title: { display: true, text: '行动类型分布' } }
            });
        }

        function renderComparisonChart() {
            const stats1 = data.getEmotionStats('emotions1').scores;
            const stats2 = data.getEmotionStats('emotions2').scores;
            const ctx = document.getElementById('comparisonChart').getContext('2d');
            chartInstances.comparison = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(cardConfig.emotionTypes),
                    datasets: [{
                        label: '首选情绪',
                        data: Object.keys(cardConfig.emotionTypes).map(k => stats1[k] || 0),
                        backgroundColor: '#FF6384'
                    }, {
                        label: '再选情绪',
                        data: Object.keys(cardConfig.emotionTypes).map(k => stats2[k] || 0),
                        backgroundColor: '#36A2EB'
                    }]
                },
                options: {
                    title: { display: true, text: '情绪强度对比' },
                    scales: { y: { beginAtZero: true } }
                }
            });
        }

        function renderActionScoreChart() {
            const stats = data.getActionStats();
            const ctx = document.getElementById('actionScoreChart').getContext('2d');
            chartInstances.actionScore = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(cardConfig.actionTypes),
                    datasets: [{
                        label: '行动意愿度',
                        data: Object.keys(cardConfig.actionTypes).map(k => stats.scores[k] || 0),
                        backgroundColor: Object.keys(cardConfig.actionTypes).map(k => cardConfig.actionTypes[k].color)
                    }]
                },
                options: {
                    title: { display: true, text: '行动分值分布' },
                    scales: { y: { beginAtZero: true } }
                }
            });
        }

        // 更新卡牌统计表格
        function updateCardStatsTable() {
            const stats = data.getAllCardStats();
            const tableBody = document.querySelector('#card-stats-table tbody');
            tableBody.innerHTML = ''; // 清空表格
            
            // 添加情绪类型行
            Object.keys(cardConfig.emotionTypes).forEach(type => {
                const typeStats = stats[type];
                const row = document.createElement('tr');
                
                // 类型名称单元格（带颜色指示器）
                const typeCell = document.createElement('td');
                typeCell.innerHTML = `<span class="color-indicator" style="background-color: ${typeStats.color}"></span>${type}`;
                row.appendChild(typeCell);
                
                // 首选情绪卡牌数量
                const emotion1Cell = document.createElement('td');
                emotion1Cell.textContent = typeStats.emotion1;
                row.appendChild(emotion1Cell);
                
                // 中期行动卡牌数量（情绪类型在行动中通常为0）
                const actionCell = document.createElement('td');
                actionCell.textContent = typeStats.action;
                row.appendChild(actionCell);
                
                // 再选情绪卡牌数量
                const emotion2Cell = document.createElement('td');
                emotion2Cell.textContent = typeStats.emotion2;
                row.appendChild(emotion2Cell);
                
                // 总计
                const totalCell = document.createElement('td');
                totalCell.textContent = typeStats.total;
                row.appendChild(totalCell);
                
                tableBody.appendChild(row);
            });
            
            // 添加行动类型行
            Object.keys(cardConfig.actionTypes).forEach(type => {
                const typeStats = stats[type];
                const row = document.createElement('tr');
                
                // 类型名称单元格（带颜色指示器）
                const typeCell = document.createElement('td');
                typeCell.innerHTML = `<span class="color-indicator" style="background-color: ${typeStats.color}"></span>${type}`;
                row.appendChild(typeCell);
                
                // 首选情绪卡牌数量（行动类型在情绪中通常为0）
                const emotion1Cell = document.createElement('td');
                emotion1Cell.textContent = typeStats.emotion1;
                row.appendChild(emotion1Cell);
                
                // 中期行动卡牌数量
                const actionCell = document.createElement('td');
                actionCell.textContent = typeStats.action;
                row.appendChild(actionCell);
                
                // 再选情绪卡牌数量（行动类型在情绪中通常为0）
                const emotion2Cell = document.createElement('td');
                emotion2Cell.textContent = typeStats.emotion2;
                row.appendChild(emotion2Cell);
                
                // 总计
                const totalCell = document.createElement('td');
                totalCell.textContent = typeStats.total;
                row.appendChild(totalCell);
                
                tableBody.appendChild(row);
            });
            
            // 添加总计行
            const totalRow = document.createElement('tr');
            totalRow.style.fontWeight = 'bold';
            
            // 总计标题单元格
            const totalLabelCell = document.createElement('td');
            totalLabelCell.textContent = '合计';
            totalRow.appendChild(totalLabelCell);
            
            // 计算各列总计
            let totalEmotion1 = 0;
            let totalAction = 0;
            let totalEmotion2 = 0;
            let totalAll = 0;
            
            Object.values(stats).forEach(typeStats => {
                totalEmotion1 += typeStats.emotion1;
                totalAction += typeStats.action;
                totalEmotion2 += typeStats.emotion2;
                totalAll += typeStats.total;
            });
            
            // 添加各列总计单元格
            const totalEmotion1Cell = document.createElement('td');
            totalEmotion1Cell.textContent = totalEmotion1;
            totalRow.appendChild(totalEmotion1Cell);
            
            const totalActionCell = document.createElement('td');
            totalActionCell.textContent = totalAction;
            totalRow.appendChild(totalActionCell);
            
            const totalEmotion2Cell = document.createElement('td');
            totalEmotion2Cell.textContent = totalEmotion2;
            totalRow.appendChild(totalEmotion2Cell);
            
            const totalAllCell = document.createElement('td');
            totalAllCell.textContent = totalAll;
            totalRow.appendChild(totalAllCell);
            
            tableBody.appendChild(totalRow);
        }

        function destroyCharts() {
            Object.values(chartInstances).forEach(chart => chart && chart.destroy());
        }

        function updateBasicInfoTable() {
            const name = document.getElementById('name').value;
            const gender = document.getElementById('gender').value;
            const age = document.getElementById('age').value;
            const date = document.getElementById('date').value;
            const consultationEvent = document.getElementById('consultation-event').value;
            
            // 获取概述内容
            const emotion1Overview = data.overviews.emotion1;
            const actionOverview = data.overviews.action;
            const emotion2Overview = data.overviews.emotion2;

            document.getElementById('name-display').textContent = name;
            document.getElementById('gender-display').textContent = gender;
            document.getElementById('age-display').textContent = age;
            document.getElementById('date-display').textContent = date;
            document.getElementById('consultation-event-display').textContent = consultationEvent;
            
            // 更新概述内容到表格
            document.getElementById('emotion1-overview-display').textContent = emotion1Overview;
            document.getElementById('action-overview-display').textContent = actionOverview;
            document.getElementById('emotion2-overview-display').textContent = emotion2Overview;
        }

        function saveAsImage() {
            const container = document.querySelector('.container');
            html2canvas(container).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const a = document.createElement('a');
                a.href = imgData;
                a.download = `PE报告_${new Date().toISOString().slice(0, 10)}.png`;
                a.click();
            });
        }

        // 初始化
        document.addEventListener('DOMContentLoaded', () => {
            addEmotionInput('emotion1', false);
            addActionInput(false);
            addEmotionInput('emotion2', false);
            updateCharts();
        });
    </script>
</body>

</html>
